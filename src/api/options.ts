import { z } from 'zod';
import { globalOptionsSchema, Paths, Router } from './shared';

export const optionsEndpoints = {
  optionsLocal: {
    method: 'POST',
    path: '/options/local' satisfies Paths,
    body: z.object({}).extend(globalOptionsSchema.shape),
    responses: {
      200: z.object({
        config: z.object({
          AskPassword: z.boolean(),
          AutoConfirm: z.boolean(),
          BackupDir: z.string(),
          BindAddr: z.string(),
          BufferSize: z.number(),
          BwLimit: z.string(),
          BwLimitFile: z.string(),
          CaCert: z.array(z.string()),
          CheckFirst: z.boolean(),
          CheckSum: z.boolean(),
          Checkers: z.number(),
          ClientCert: z.string(),
          ClientKey: z.string(),
          CompareDest: z.array(z.string()),
          ConnectTimeout: z.number(),
          Cookie: z.boolean(),
          CopyDest: z.array(z.string()),
          CutoffMode: z.string(),
          DataRateUnit: z.string(),
          DefaultTime: z.string(),
          DeleteMode: z.number(),
          DisableFeatures: z.null(),
          DisableHTTP2: z.boolean(),
          DisableHTTPKeepAlives: z.boolean(),
          DownloadHeaders: z.null(),
          DryRun: z.boolean(),
          Dump: z.string(),
          ErrorOnNoTransfer: z.boolean(),
          ExpectContinueTimeout: z.number(),
          FixCase: z.boolean(),
          FsCacheExpireDuration: z.number(),
          FsCacheExpireInterval: z.number(),
          Headers: z.null(),
          HumanReadable: z.boolean(),
          IgnoreCaseSync: z.boolean(),
          IgnoreChecksum: z.boolean(),
          IgnoreErrors: z.boolean(),
          IgnoreExisting: z.boolean(),
          IgnoreSize: z.boolean(),
          IgnoreTimes: z.boolean(),
          Immutable: z.boolean(),
          Inplace: z.boolean(),
          InsecureSkipVerify: z.boolean(),
          Interactive: z.boolean(),
          KvLockTime: z.number(),
          Links: z.boolean(),
          LogLevel: z.string(),
          LowLevelRetries: z.number(),
          MaxBacklog: z.number(),
          MaxBufferMemory: z.number(),
          MaxDelete: z.number(),
          MaxDeleteSize: z.number(),
          MaxDepth: z.number(),
          MaxDuration: z.number(),
          MaxStatsGroups: z.number(),
          MaxTransfer: z.number(),
          Metadata: z.boolean(),
          MetadataMapper: z.null(),
          MetadataSet: z.null(),
          ModifyWindow: z.number(),
          MultiThreadChunkSize: z.number(),
          MultiThreadCutoff: z.number(),
          MultiThreadSet: z.boolean(),
          MultiThreadStreams: z.number(),
          MultiThreadWriteBufferSize: z.number(),
          NoCheckDest: z.boolean(),
          NoConsole: z.boolean(),
          NoGzip: z.boolean(),
          NoTraverse: z.boolean(),
          NoUnicodeNormalization: z.boolean(),
          NoUpdateDirModTime: z.boolean(),
          NoUpdateModTime: z.boolean(),
          OrderBy: z.string(),
          PartialSuffix: z.string(),
          PasswordCommand: z.null(),
          Progress: z.boolean(),
          ProgressTerminalTitle: z.boolean(),
          RefreshTimes: z.boolean(),
          Retries: z.number(),
          RetriesInterval: z.number(),
          ServerSideAcrossConfigs: z.boolean(),
          SizeOnly: z.boolean(),
          StatsFileNameLength: z.number(),
          StatsLogLevel: z.string(),
          StatsOneLine: z.boolean(),
          StatsOneLineDate: z.boolean(),
          StatsOneLineDateFormat: z.string(),
          StreamingUploadCutoff: z.number(),
          Suffix: z.string(),
          SuffixKeepExtension: z.boolean(),
          TPSLimit: z.number(),
          TPSLimitBurst: z.number(),
          TerminalColorMode: z.string(),
          Timeout: z.number(),
          TrackRenames: z.boolean(),
          TrackRenamesStrategy: z.string(),
          TrafficClass: z.number(),
          Transfers: z.number(),
          UpdateOlder: z.boolean(),
          UploadHeaders: z.null(),
          UseJSONLog: z.boolean(),
          UseListR: z.boolean(),
          UseMmap: z.boolean(),
          UseServerModTime: z.boolean(),
          UserAgent: z.string(),
        }),
        filter: z.object({
          DeleteExcluded: z.boolean(),
          ExcludeFile: z.array(z.string()),
          ExcludeFrom: z.array(z.string()),
          ExcludeRule: z.array(z.string()),
          FilesFrom: z.array(z.string()),
          FilesFromRaw: z.array(z.string()),
          FilterFrom: z.array(z.string()),
          FilterRule: z.array(z.string()),
          HashFilter: z.string(),
          IgnoreCase: z.boolean(),
          IncludeFrom: z.array(z.string()),
          IncludeRule: z.array(z.string()),
          MaxAge: z.number(),
          MaxSize: z.number(),
          MetaRules: z.object({
            ExcludeFrom: z.array(z.string()),
            ExcludeRule: z.array(z.string()),
            FilterFrom: z.array(z.string()),
            FilterRule: z.array(z.string()),
            IncludeFrom: z.array(z.string()),
            IncludeRule: z.array(z.string()),
          }),
          MinAge: z.number(),
          MinSize: z.number(),
        }),
      }),
    },
  },
} as const satisfies Router;
